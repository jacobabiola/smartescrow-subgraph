// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Lock extends ethereum.Event {
  get params(): Lock__Params {
    return new Lock__Params(this);
  }
}

export class Lock__Params {
  _event: Lock;

  constructor(event: Lock) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get details(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Register extends ethereum.Event {
  get params(): Register__Params {
    return new Register__Params(this);
  }
}

export class Register__Params {
  _event: Register;

  constructor(event: Register) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class Release extends ethereum.Event {
  get params(): Release__Params {
    return new Release__Params(this);
  }
}

export class Release__Params {
  _event: Release;

  constructor(event: Release) {
    this._event = event;
  }

  get milestone(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Resolve extends ethereum.Event {
  get params(): Resolve__Params {
    return new Resolve__Params(this);
  }
}

export class Resolve__Params {
  _event: Resolve;

  constructor(event: Resolve) {
    this._event = event;
  }

  get resolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get clientAward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get providerAward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get resolutionFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get details(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Rule extends ethereum.Event {
  get params(): Rule__Params {
    return new Rule__Params(this);
  }
}

export class Rule__Params {
  _event: Rule;

  constructor(event: Rule) {
    this._event = event;
  }

  get resolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get clientAward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get providerAward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ruling(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Ruling extends ethereum.Event {
  get params(): Ruling__Params {
    return new Ruling__Params(this);
  }
}

export class Ruling__Params {
  _event: Ruling;

  constructor(event: Ruling) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get balance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SmartInvoice extends ethereum.SmartContract {
  static bind(address: Address): SmartInvoice {
    return new SmartInvoice("SmartInvoice", address);
  }

  NUM_RULING_OPTIONS(): BigInt {
    let result = super.call(
      "NUM_RULING_OPTIONS",
      "NUM_RULING_OPTIONS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_NUM_RULING_OPTIONS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NUM_RULING_OPTIONS",
      "NUM_RULING_OPTIONS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RULINGS(param0: BigInt, param1: BigInt): i32 {
    let result = super.call("RULINGS", "RULINGS(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toI32();
  }

  try_RULINGS(param0: BigInt, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("RULINGS", "RULINGS(uint256,uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  WRAPPED_TOKEN(): Address {
    let result = super.call("WRAPPED_TOKEN", "WRAPPED_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_WRAPPED_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "WRAPPED_TOKEN",
      "WRAPPED_TOKEN():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amounts(param0: BigInt): BigInt {
    let result = super.call("amounts", "amounts(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_amounts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("amounts", "amounts(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  client(): Address {
    let result = super.call("client", "client():(address)", []);

    return result[0].toAddress();
  }

  try_client(): ethereum.CallResult<Address> {
    let result = super.tryCall("client", "client():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  details(): Bytes {
    let result = super.call("details", "details():(bytes32)", []);

    return result[0].toBytes();
  }

  try_details(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("details", "details():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  disputeId(): BigInt {
    let result = super.call("disputeId", "disputeId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_disputeId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("disputeId", "disputeId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  milestone(): BigInt {
    let result = super.call("milestone", "milestone():(uint256)", []);

    return result[0].toBigInt();
  }

  try_milestone(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("milestone", "milestone():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provider(): Address {
    let result = super.call("provider", "provider():(address)", []);

    return result[0].toAddress();
  }

  try_provider(): ethereum.CallResult<Address> {
    let result = super.tryCall("provider", "provider():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  released(): BigInt {
    let result = super.call("released", "released():(uint256)", []);

    return result[0].toBigInt();
  }

  try_released(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("released", "released():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resolutionRate(): BigInt {
    let result = super.call("resolutionRate", "resolutionRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_resolutionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "resolutionRate",
      "resolutionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resolver(): Address {
    let result = super.call("resolver", "resolver():(address)", []);

    return result[0].toAddress();
  }

  try_resolver(): ethereum.CallResult<Address> {
    let result = super.tryCall("resolver", "resolver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolverType(): i32 {
    let result = super.call("resolverType", "resolverType():(uint8)", []);

    return result[0].toI32();
  }

  try_resolverType(): ethereum.CallResult<i32> {
    let result = super.tryCall("resolverType", "resolverType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  terminationTime(): BigInt {
    let result = super.call(
      "terminationTime",
      "terminationTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_terminationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "terminationTime",
      "terminationTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  total(): BigInt {
    let result = super.call("total", "total():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("total", "total():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _client(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _provider(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _resolverType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _resolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _terminationTime(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _resolutionRate(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _details(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _details(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get _milestone(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}

export class Release1Call extends ethereum.Call {
  get inputs(): Release1Call__Inputs {
    return new Release1Call__Inputs(this);
  }

  get outputs(): Release1Call__Outputs {
    return new Release1Call__Outputs(this);
  }
}

export class Release1Call__Inputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }
}

export class Release1Call__Outputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }
}

export class ReleaseTokensCall extends ethereum.Call {
  get inputs(): ReleaseTokensCall__Inputs {
    return new ReleaseTokensCall__Inputs(this);
  }

  get outputs(): ReleaseTokensCall__Outputs {
    return new ReleaseTokensCall__Outputs(this);
  }
}

export class ReleaseTokensCall__Inputs {
  _call: ReleaseTokensCall;

  constructor(call: ReleaseTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleaseTokensCall__Outputs {
  _call: ReleaseTokensCall;

  constructor(call: ReleaseTokensCall) {
    this._call = call;
  }
}

export class ResolveCall extends ethereum.Call {
  get inputs(): ResolveCall__Inputs {
    return new ResolveCall__Inputs(this);
  }

  get outputs(): ResolveCall__Outputs {
    return new ResolveCall__Outputs(this);
  }
}

export class ResolveCall__Inputs {
  _call: ResolveCall;

  constructor(call: ResolveCall) {
    this._call = call;
  }

  get _clientAward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _providerAward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _details(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ResolveCall__Outputs {
  _call: ResolveCall;

  constructor(call: ResolveCall) {
    this._call = call;
  }
}

export class RuleCall extends ethereum.Call {
  get inputs(): RuleCall__Inputs {
    return new RuleCall__Inputs(this);
  }

  get outputs(): RuleCall__Outputs {
    return new RuleCall__Outputs(this);
  }
}

export class RuleCall__Inputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RuleCall__Outputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
