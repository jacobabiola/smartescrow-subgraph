// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Invoice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("network", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("factoryAddress", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("client", Value.fromBytes(Bytes.empty()));
    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("resolverType", Value.fromString(""));
    this.set("resolver", Value.fromBytes(Bytes.empty()));
    this.set("resolutionRate", Value.fromBigInt(BigInt.zero()));
    this.set("isLocked", Value.fromBoolean(false));
    this.set("amounts", Value.fromBigIntArray(new Array(0)));
    this.set("numMilestones", Value.fromI32(0));
    this.set("currentMilestone", Value.fromBigInt(BigInt.zero()));
    this.set("total", Value.fromBigInt(BigInt.zero()));
    this.set("released", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("creationTxHash", Value.fromBytes(Bytes.empty()));
    this.set("terminationTime", Value.fromBigInt(BigInt.zero()));
    this.set("details", Value.fromBytes(Bytes.empty()));
    this.set("ipfsHash", Value.fromString(""));
    this.set("disputeId", Value.fromBigInt(BigInt.zero()));
    this.set("projectName", Value.fromString(""));
    this.set("projectDescription", Value.fromString(""));
    this.set("projectAgreement", Value.fromString(""));
    this.set("deposits", Value.fromStringArray(new Array(0)));
    this.set("withdraws", Value.fromStringArray(new Array(0)));
    this.set("releases", Value.fromStringArray(new Array(0)));
    this.set("disputes", Value.fromStringArray(new Array(0)));
    this.set("resolutions", Value.fromStringArray(new Array(0)));
    this.set("tokenMetadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Invoice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Invoice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Invoice", id.toString(), this);
    }
  }

  static load(id: string): Invoice | null {
    return changetype<Invoice | null>(store.get("Invoice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get factoryAddress(): Bytes {
    let value = this.get("factoryAddress");
    return value!.toBytes();
  }

  set factoryAddress(value: Bytes) {
    this.set("factoryAddress", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get client(): Bytes {
    let value = this.get("client");
    return value!.toBytes();
  }

  set client(value: Bytes) {
    this.set("client", Value.fromBytes(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get resolverType(): string {
    let value = this.get("resolverType");
    return value!.toString();
  }

  set resolverType(value: string) {
    this.set("resolverType", Value.fromString(value));
  }

  get resolver(): Bytes {
    let value = this.get("resolver");
    return value!.toBytes();
  }

  set resolver(value: Bytes) {
    this.set("resolver", Value.fromBytes(value));
  }

  get resolutionRate(): BigInt {
    let value = this.get("resolutionRate");
    return value!.toBigInt();
  }

  set resolutionRate(value: BigInt) {
    this.set("resolutionRate", Value.fromBigInt(value));
  }

  get isLocked(): boolean {
    let value = this.get("isLocked");
    return value!.toBoolean();
  }

  set isLocked(value: boolean) {
    this.set("isLocked", Value.fromBoolean(value));
  }

  get amounts(): Array<BigInt> {
    let value = this.get("amounts");
    return value!.toBigIntArray();
  }

  set amounts(value: Array<BigInt>) {
    this.set("amounts", Value.fromBigIntArray(value));
  }

  get numMilestones(): i32 {
    let value = this.get("numMilestones");
    return value!.toI32();
  }

  set numMilestones(value: i32) {
    this.set("numMilestones", Value.fromI32(value));
  }

  get currentMilestone(): BigInt {
    let value = this.get("currentMilestone");
    return value!.toBigInt();
  }

  set currentMilestone(value: BigInt) {
    this.set("currentMilestone", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value!.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get released(): BigInt {
    let value = this.get("released");
    return value!.toBigInt();
  }

  set released(value: BigInt) {
    this.set("released", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get creationTxHash(): Bytes {
    let value = this.get("creationTxHash");
    return value!.toBytes();
  }

  set creationTxHash(value: Bytes) {
    this.set("creationTxHash", Value.fromBytes(value));
  }

  get terminationTime(): BigInt {
    let value = this.get("terminationTime");
    return value!.toBigInt();
  }

  set terminationTime(value: BigInt) {
    this.set("terminationTime", Value.fromBigInt(value));
  }

  get details(): Bytes {
    let value = this.get("details");
    return value!.toBytes();
  }

  set details(value: Bytes) {
    this.set("details", Value.fromBytes(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value!.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get disputeId(): BigInt {
    let value = this.get("disputeId");
    return value!.toBigInt();
  }

  set disputeId(value: BigInt) {
    this.set("disputeId", Value.fromBigInt(value));
  }

  get projectName(): string {
    let value = this.get("projectName");
    return value!.toString();
  }

  set projectName(value: string) {
    this.set("projectName", Value.fromString(value));
  }

  get projectDescription(): string {
    let value = this.get("projectDescription");
    return value!.toString();
  }

  set projectDescription(value: string) {
    this.set("projectDescription", Value.fromString(value));
  }

  get projectAgreement(): string {
    let value = this.get("projectAgreement");
    return value!.toString();
  }

  set projectAgreement(value: string) {
    this.set("projectAgreement", Value.fromString(value));
  }

  get startDate(): BigInt | null {
    let value = this.get("startDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startDate(value: BigInt | null) {
    if (!value) {
      this.unset("startDate");
    } else {
      this.set("startDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get endDate(): BigInt | null {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt | null) {
    if (!value) {
      this.unset("endDate");
    } else {
      this.set("endDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get withdraws(): Array<string> {
    let value = this.get("withdraws");
    return value!.toStringArray();
  }

  set withdraws(value: Array<string>) {
    this.set("withdraws", Value.fromStringArray(value));
  }

  get releases(): Array<string> {
    let value = this.get("releases");
    return value!.toStringArray();
  }

  set releases(value: Array<string>) {
    this.set("releases", Value.fromStringArray(value));
  }

  get disputes(): Array<string> {
    let value = this.get("disputes");
    return value!.toStringArray();
  }

  set disputes(value: Array<string>) {
    this.set("disputes", Value.fromStringArray(value));
  }

  get resolutions(): Array<string> {
    let value = this.get("resolutions");
    return value!.toStringArray();
  }

  set resolutions(value: Array<string>) {
    this.set("resolutions", Value.fromStringArray(value));
  }

  get tokenMetadata(): string {
    let value = this.get("tokenMetadata");
    return value!.toString();
  }

  set tokenMetadata(value: string) {
    this.set("tokenMetadata", Value.fromString(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("invoice", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get invoice(): string {
    let value = this.get("invoice");
    return value!.toString();
  }

  set invoice(value: string) {
    this.set("invoice", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Release extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("invoice", Value.fromString(""));
    this.set("milestone", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Release entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Release entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Release", id.toString(), this);
    }
  }

  static load(id: string): Release | null {
    return changetype<Release | null>(store.get("Release", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get invoice(): string {
    let value = this.get("invoice");
    return value!.toString();
  }

  set invoice(value: string) {
    this.set("invoice", Value.fromString(value));
  }

  get milestone(): BigInt {
    let value = this.get("milestone");
    return value!.toBigInt();
  }

  set milestone(value: BigInt) {
    this.set("milestone", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("invoice", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Withdraw entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Withdraw", id.toString(), this);
    }
  }

  static load(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get invoice(): string {
    let value = this.get("invoice");
    return value!.toString();
  }

  set invoice(value: string) {
    this.set("invoice", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Dispute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("invoice", Value.fromString(""));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("details", Value.fromBytes(Bytes.empty()));
    this.set("ipfsHash", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dispute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Dispute entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Dispute", id.toString(), this);
    }
  }

  static load(id: string): Dispute | null {
    return changetype<Dispute | null>(store.get("Dispute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get invoice(): string {
    let value = this.get("invoice");
    return value!.toString();
  }

  set invoice(value: string) {
    this.set("invoice", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get details(): Bytes {
    let value = this.get("details");
    return value!.toBytes();
  }

  set details(value: Bytes) {
    this.set("details", Value.fromBytes(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value!.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get disputeToken(): Bytes | null {
    let value = this.get("disputeToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set disputeToken(value: Bytes | null) {
    if (!value) {
      this.unset("disputeToken");
    } else {
      this.set("disputeToken", Value.fromBytes(<Bytes>value));
    }
  }

  get disputeFee(): BigInt | null {
    let value = this.get("disputeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set disputeFee(value: BigInt | null) {
    if (!value) {
      this.unset("disputeFee");
    } else {
      this.set("disputeFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get disputeId(): BigInt | null {
    let value = this.get("disputeId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set disputeId(value: BigInt | null) {
    if (!value) {
      this.unset("disputeId");
    } else {
      this.set("disputeId", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Resolution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("details", Value.fromBytes(Bytes.empty()));
    this.set("ipfsHash", Value.fromString(""));
    this.set("invoice", Value.fromString(""));
    this.set("resolverType", Value.fromString(""));
    this.set("resolver", Value.fromBytes(Bytes.empty()));
    this.set("clientAward", Value.fromBigInt(BigInt.zero()));
    this.set("providerAward", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Resolution entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Resolution", id.toString(), this);
    }
  }

  static load(id: string): Resolution | null {
    return changetype<Resolution | null>(store.get("Resolution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get details(): Bytes {
    let value = this.get("details");
    return value!.toBytes();
  }

  set details(value: Bytes) {
    this.set("details", Value.fromBytes(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value!.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get invoice(): string {
    let value = this.get("invoice");
    return value!.toString();
  }

  set invoice(value: string) {
    this.set("invoice", Value.fromString(value));
  }

  get resolverType(): string {
    let value = this.get("resolverType");
    return value!.toString();
  }

  set resolverType(value: string) {
    this.set("resolverType", Value.fromString(value));
  }

  get resolver(): Bytes {
    let value = this.get("resolver");
    return value!.toBytes();
  }

  set resolver(value: Bytes) {
    this.set("resolver", Value.fromBytes(value));
  }

  get clientAward(): BigInt {
    let value = this.get("clientAward");
    return value!.toBigInt();
  }

  set clientAward(value: BigInt) {
    this.set("clientAward", Value.fromBigInt(value));
  }

  get providerAward(): BigInt {
    let value = this.get("providerAward");
    return value!.toBigInt();
  }

  set providerAward(value: BigInt) {
    this.set("providerAward", Value.fromBigInt(value));
  }

  get resolutionDetails(): Bytes | null {
    let value = this.get("resolutionDetails");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set resolutionDetails(value: Bytes | null) {
    if (!value) {
      this.unset("resolutionDetails");
    } else {
      this.set("resolutionDetails", Value.fromBytes(<Bytes>value));
    }
  }

  get resolutionFee(): BigInt | null {
    let value = this.get("resolutionFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set resolutionFee(value: BigInt | null) {
    if (!value) {
      this.unset("resolutionFee");
    } else {
      this.set("resolutionFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get ruling(): BigInt | null {
    let value = this.get("ruling");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ruling(value: BigInt | null) {
    if (!value) {
      this.unset("ruling");
    } else {
      this.set("ruling", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}
